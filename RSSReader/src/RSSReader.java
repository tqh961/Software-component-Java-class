import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Tan Qi Hao
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Output the header
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        //Check the existence of title tag in channel
        if (getChildElement(channel, "title") > -1) {
            int i = getChildElement(channel, "title");
            while (i < channel.numberOfChildren()) {
                //Search for the title
                if (channel.child(i).label().equals("title")
                        && channel.child(i).numberOfChildren() != 0) {
                    out.println(channel.child(i).child(0).label());
                }
                i++;
            }

        } else {

            out.println("Empty title");
        }

        out.println("</title>");
        out.println("</head>");
        out.println("<body>");

        out.print("<h1><a href=" + '"');

        int j = 0;
        while (j < channel.numberOfChildren()) { //Output link
            if (channel.child(j).label().contentEquals("link")) {
                out.print(channel.child(j).child(0).label());
            }
            j++;
        }

        out.print('"' + ">");
        //Check for the existence of title tag
        if (getChildElement(channel, "title") > -1) {
            int t = getChildElement(channel, "title");
            while (t < channel.numberOfChildren()) {
                if (channel.child(t).label().equals("title")) {
                    out.print(channel.child(t).child(0).label());
                }
                t++;
            }
        } else {
            out.print("Empty title");
        }

        out.println("</a></h1>");
        out.println("<p>");

        int l = 0;
        while (l < channel.numberOfChildren()) {
            //Search and output the description
            if (channel.child(l).label().equals("description")) {
                out.println(channel.child(l).child(0).label());
            }
            l++;
        }

        out.println("</p>");
        out.println("<table border=" + '"' + "1" + '"' + ">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //Output header
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = 0;
        int item = -1;
        boolean prompt = true;

        //Search for the childElement
        while (i < xml.numberOfChildren() && prompt) {

            if (xml.child(i).label().equals(tag)) {
                prompt = false;
                item = i;
            }

            i++;
        }

        return item;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        out.print("<td>");
        int i = 0;
        int sumDate = 0;
        while (i < item.numberOfChildren()) { //Search for the item pubDate
            if (item.child(i).label().contentEquals("pubDate")
                    && item.child(i).numberOfChildren() != 0) {
                out.println(item.child(i).child(0).label());
                sumDate++;
            }
            i++;
        }

        if (sumDate == 0) { //If it does not exist

            out.println("no source available");

        }
        out.print("</td>");
        out.println();

        out.print("<td>");
        int j = 0;
        int sumSource = 0;
        while (j < item.numberOfChildren()) {
            //Search for the source and determine its children
            if (item.child(j).label().equals("source")
                    && item.child(j).numberOfChildren() != 0) {
                out.println(item.child(j).child(0).label());
                sumSource++;
            }

            j++;
        }

        if (sumSource == 0) {

            out.println("no source available");

        }
        out.print("</td>");
        out.println();

        out.print("<td>");
        out.print("<a href=" + '"');

        int m = 0;
        while (m < item.numberOfChildren()) {
            //Search for the link
            if (item.child(m).label().equals("link")) {
                out.println(item.child(m).child(0).label());
            }
            m++;
        }
        out.print('"' + ">");
        int l = 0;
        int sumTitle = 0;
        while (l < item.numberOfChildren()) {
            //Search for title
            if (item.child(l).label().equals("title")) {
                out.println(item.child(l).child(0).label());
                sumTitle++;
            }
            l++;
        }

        if (sumTitle == 0) {

            out.println("No title available");

        }
        out.print("</a>");
        out.print("</td>");
        out.println();

        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0: ");
        String url = in.nextLine();
        out.println();

        out.print("Input filename that must end with .html: ");
        String filename = in.nextLine();

        //Output the .html file
        SimpleWriter outHtml = new SimpleWriter1L(filename);
        XMLTree rss = new XMLTree1(url);

        double versionNum = Double.parseDouble(rss.attributeValue("version"));

        if (rss.isTag() && versionNum == 2.0) { //Determine the RSS feed

            outputHeader(rss.child(0), outHtml);

            int i = 0;
            while (i < rss.child(0).numberOfChildren()) {

                if (rss.child(0).child(i).label().equals("item")) {
                    processItem(rss.child(0).child(i), outHtml);
                }
                i++;
            }
            outputFooter(outHtml);

        } else {
            out.println("Sorry, this is not a RSS website");
        }

        in.close();
        out.close();
    }

}